# Default configuration values for the network-bootstrapper subchart. Each key is annotated for helm-docs output.
image:
  # -- (string) OCI registry path hosting the network bootstrapper image.
  repository: ghcr.io/settlemint/network-bootstrapper
  # -- (string) Image pull policy controlling when Kubernetes fetches updated image layers.
  pullPolicy: IfNotPresent
  # -- (string) Image tag override; leave empty to inherit the chart appVersion.
  tag: ""

# -- (list) Image pull secrets enabling access to private registries.
imagePullSecrets: []

# -- (string) Override for the short release name used by name templates.
nameOverride: ""

# -- (string) Override for the fully qualified resource name generated by helpers.
fullnameOverride: "bootstrapper"

# ServiceAccount configuration associated with the bootstrapper job.
serviceAccount:
  # -- (bool) Create a ServiceAccount resource for the release automatically.
  create: true
  # -- (bool) Mount the ServiceAccount token into the bootstrapper pod.
  automount: true
  # -- (object) Metadata annotations applied to the ServiceAccount.
  annotations: {}
  # -- (string) Existing ServiceAccount name to reuse instead of creating one.
  name: ""

# RBAC settings that provision Role and RoleBinding for Kubernetes output.
rbac:
  # -- (bool) Render Role and RoleBinding resources tied to the ServiceAccount.
  create: true

# Additional annotations merged onto the bootstrapper pod template.
podAnnotations: {}

# Extra labels merged onto the bootstrapper pod template.
podLabels: {}

# Pod-level security context applied to all containers in the pod.
podSecurityContext:
  {}
  # -- Leave empty to inherit from global.securityContexts.pod.
  # fsGroup: 2000

# Container security context applied to the bootstrapper container.
securityContext:
  {}
  # -- Leave empty to inherit from global.securityContexts.container.
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- (list|string) Init containers executed before the bootstrapper container starts.
initContainers: []
# - name: wait-for-genesis
#   image: busybox:1.36
#   imagePullPolicy: IfNotPresent
#   command:
#     - sh
#     - -c
#   args:
#     - >-
#       until nc -z ${STATIC_NODE_HOST:?} ${STATIC_NODE_PORT:?}; do echo "waiting for nodes"; sleep 2; done
#   env:
#     - name: STATIC_NODE_HOST
#       value: besu-node-validator-0.besu-node-validator
#     - name: STATIC_NODE_PORT
#       value: "30303"
#   envFrom:
#     - secretRef:
#         name: bootstrapper-env
#   volumeMounts:
#     - name: config
#       mountPath: /config
#   resources:
#     requests:
#       cpu: 50m
#       memory: 64Mi
#   securityContext: {}
#   workingDir: /config
#   stdin: false
#   tty: false

# CPU and memory requests or limits for the bootstrapper container.
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- (list) Additional volumes attached to the bootstrapper pod.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- (list) Extra volume mounts applied to the bootstrapper container.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Node selector constraints for scheduling the bootstrapper pod.
nodeSelector: {}

# -- (list) Tolerations allowing the bootstrapper pod onto tainted nodes.
tolerations: []

# Affinity and anti-affinity rules influencing pod placement.
affinity: {}

# Settings passed to the network-bootstrapper CLI executed by the job.
settings:
  # -- (string) Kubernetes DNS suffix appended to generated static node hostnames when unset by the CLI.
  clusterDomain: svc.cluster.local
  # -- (int) Default TCP P2P port used in generated enode URIs when no override is provided.
  defaultStaticNodePort: 30303
  # -- (int) Default UDP discovery port used in generated enode URIs when no override is provided.
  defaultStaticNodeDiscoveryPort: 30303
  # -- (int) Number of validator identities to generate (default 4).
  validators:
  # -- (string) DNS suffix appended to generated static node hostnames.
  staticNodeDomain:
  # -- (string) Namespace component inserted between service name and domain in static node hostnames.
  staticNodeNamespace:
  # -- (int) TCP P2P port embedded in static node enode URIs.
  staticNodePort:
  # -- (int) UDP discovery port embedded in static node enode URIs.
  staticNodeDiscoveryPort:
  # -- (string) Headless Service name used when constructing static node hostnames.
  staticNodeServiceName:
  # -- (string) StatefulSet prefix applied to validator pod hostnames.
  staticNodePodPrefix:
  # -- (string) ConfigMap name storing the generated genesis.json payload.
  genesisConfigMapName:
  # -- (string) ConfigMap name storing the generated static-nodes.json payload.
  staticNodesConfigMapName:
  # -- (string) Prefix used for faucet ConfigMaps and Secrets.
  faucetArtifactPrefix:
  # -- (string) Path to a JSON allocations file providing pre-funded accounts.
  allocations:
  # -- (string) Output target for generated artefacts: screen, file, or kubernetes.
  outputType: kubernetes
  # -- (string) Consensus engine to configure (QBFT or IBFTv2).
  consensus:
  # -- (int) Explicit chain ID to encode into the genesis file.
  chainId:
  # -- (int) Block interval in seconds for the genesis configuration.
  secondsPerBlock:
  # -- (int) Genesis block gas limit expressed as a decimal number.
  gasLimit:
  # -- (int) Base gas price in wei applied across the network.
  gasPrice:
  # -- (int) Maximum EVM stack size permitted for contract execution.
  evmStackSize:
  # -- (int) Maximum smart-contract bytecode size accepted by the EVM.
  contractSizeLimit:

# Artifact sourcing controls for bootstrap data used by the nodes chart.
artifacts:
  # -- (string) Determines how Besu network artifacts are populated. Use `generated` to run the job or `external` to supply values manually.
  source: generated
  external:
    # -- (object) Besu genesis document rendered into the `besu-genesis` ConfigMap when `source` equals `external`.
    genesis: {}
    # -- (list) Collection of enode URIs persisted to the `besu-static-nodes` ConfigMap when `source` equals `external`.
    staticNodes: []
    # -- (list) Validator node definitions providing the data expected by the nodes chart. Each entry must include `address`, `publicKey`, `privateKey`, and `enode`.
    validators: []
    faucet:
      # -- (string) Faucet account address stored in the `besu-faucet-address` ConfigMap when `source` equals `external`.
      address: ""
      # -- (string) Faucet account public key stored in the `besu-faucet-pubkey` ConfigMap when `source` equals `external`.
      publicKey: ""
      # -- (string) Faucet private key stored in the `besu-faucet-private-key` Secret when `source` equals `external`.
      privateKey: ""
