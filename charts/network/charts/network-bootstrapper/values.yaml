# image configures the container image for the network bootstrapper job.
image:
  # image.repository is the OCI registry path that hosts the bootstrapper image.
  repository: ghcr.io/settlemint/network-bootstrapper
  # image.pullPolicy controls when Kubernetes re-pulls the bootstrapper image layers.
  pullPolicy: IfNotPresent
  # image.tag overrides the image tag; leave empty to fall back to the chart appVersion.
  tag: ""

# imagePullSecrets lists Kubernetes secrets used to authenticate against private registries.
imagePullSecrets: []

# nameOverride replaces the short chart name used in resource naming helpers.
nameOverride: ""

# fullnameOverride replaces the fully qualified resource name generated by the helpers template.
fullnameOverride: "bootstrapper"

# serviceAccount encapsulates the ServiceAccount resource bound to the bootstrapper pod.
serviceAccount:
  # serviceAccount.create toggles creation of a dedicated ServiceAccount for this release.
  create: true
  # serviceAccount.automount determines whether the pod receives a projected API token.
  automount: true
  # serviceAccount.annotations adds metadata annotations to the generated (or referenced) ServiceAccount.
  annotations: {}
  # serviceAccount.name supplies an existing ServiceAccount to reuse instead of creating one automatically.
  name: ""

# rbac configures Role and RoleBinding manifests required for Kubernetes output mode.
rbac:
  # rbac.create controls whether RBAC resources are rendered for the bootstrapper ServiceAccount.
  create: true

# podAnnotations adds custom annotations to the bootstrapper pod template metadata.
podAnnotations: {}

# podLabels adds custom labels to the bootstrapper pod template metadata.
podLabels: {}

# podSecurityContext defines default security context attributes applied at the pod level.
podSecurityContext:
  {}
  # fsGroup: 2000

# securityContext defines the container security context for the bootstrapper container.
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# resources specifies CPU and memory requests or limits for the bootstrapper container.
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# volumes lists extra volumes attached to the bootstrapper pod for custom inputs or outputs.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# volumeMounts lists additional volume mounts injected into the bootstrapper container definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# nodeSelector constrains scheduling of the bootstrapper pod to nodes with matching labels.
nodeSelector: {}

# tolerations allows the bootstrapper pod to schedule onto tainted nodes.
tolerations: []

# affinity defines node or pod affinity rules that steer bootstrapper pod placement.
affinity: {}

# clusterDomain is the Kubernetes DNS suffix appended when generating static node hostnames.
clusterDomain: svc.cluster.local

# defaultStaticNodePort is the Besu P2P TCP port used in generated enode URIs when not overridden.
defaultStaticNodePort: 30303

# defaultStaticNodeDiscoveryPort is the Besu UDP discovery port used in generated enode URIs when not overridden.
defaultStaticNodeDiscoveryPort: 30303

# settings maps to CLI flags for the bootstrapper command executed by the job.
settings:
  # settings.validators controls how many validator identities the bootstrapper produces (default 4).
  validators:
  # settings.staticNodeDomain overrides the DNS suffix appended to generated static node hostnames.
  staticNodeDomain:
  # settings.staticNodeNamespace overrides the namespace segment embedded into static node hostnames.
  staticNodeNamespace:
  # settings.staticNodePort overrides the TCP P2P port encoded in static node enode URIs.
  staticNodePort:
  # settings.staticNodeDiscoveryPort overrides the UDP discovery port encoded in static node enode URIs.
  staticNodeDiscoveryPort:
  # settings.allocations provides a path to a JSON allocations file that seeds pre-funded accounts.
  allocations:
  # settings.outputType selects where generated artefacts are written: screen, file, or kubernetes.
  outputType: kubernetes
  # settings.consensus selects the Besu consensus engine (QBFT or IBFTv2).
  consensus:
  # settings.chainId overrides the randomly generated chain ID used in the genesis file.
  chainId:
  # settings.secondsPerBlock sets the target block interval encoded in genesis.
  secondsPerBlock:
  # settings.gasLimit sets the genesis block gas limit in decimal format.
  gasLimit:
  # settings.gasPrice sets the base gas price in wei recorded in genesis metadata.
  gasPrice:
  # settings.evmStackSize sets the maximum EVM stack size available to smart contracts.
  evmStackSize:
  # settings.contractSizeLimit sets the maximum contract bytecode size permitted by the EVM.
  contractSizeLimit:
